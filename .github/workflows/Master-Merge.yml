name: Master Merge Pipeline

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the source code
      - name: Checkout source code
        uses: actions/checkout@v3

      # Step 2: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 3: Set up JDK 17 for the build process
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 4: Set up environment variables
      - name: Set up environment variables
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> $GITHUB_ENV

      # Step 5: Install dependencies and run tests
      - name: Install dependencies and run tests
        run: mvn clean install -Dspring.profiles.active=ci

      # Step 6: Archive the build artifacts
      - name: Archive the build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/*.jar

      # Step 7: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 8: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 9: Download the build artifact for Docker
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      # Step 10: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/online-food-ordering:${{ github.sha }} \
                       --build-arg JAR_FILE=target/Online-Food-Ordering-0.0.1-SNAPSHOT.jar .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/online-food-ordering:${{ github.sha }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/online-food-ordering:latest

      # Step 11: Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/online-food-ordering:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/online-food-ordering:latest
